package net.rikarin.http

object StatusCodes {
    const val status100Continue = 100
    const val status101SwitchingProtocols = 101;
    const val status102Processing = 102;
    const val status200OK = 200;
    const val status201Created = 201;
    const val status202Accepted = 202;
    const val status203NonAuthoritative = 203;
    const val status204NoContent = 204;
    const val status205ResetContent = 205;
    const val status206PartialContent = 206;
    const val status207MultiStatus = 207;
    const val status208AlreadyReported = 208;
    const val status226IMUsed = 226;
    const val status300MultipleChoices = 300;
    const val status301MovedPermanently = 301;
    const val status302Found = 302;
    const val status303SeeOther = 303;
    const val status304NotModified = 304;
    const val status305UseProxy = 305;
    const val status306SwitchProxy = 306; // RFC 2616, removed
    const val status307TemporaryRedirect = 307;
    const val status308PermanentRedirect = 308;
    const val status400BadRequest = 400;
    const val status401Unauthorized = 401;
    const val status402PaymentRequired = 402;
    const val status403Forbidden = 403;
    const val status404NotFound = 404;
    const val status405MethodNotAllowed = 405;
    const val status406NotAcceptable = 406;
    const val status407ProxyAuthenticationRequired = 407;
    const val status408RequestTimeout = 408;
    const val status409Conflict = 409;
    const val status410Gone = 410;
    const val status411LengthRequired = 411;
    const val status412PreconditionFailed = 412;
    const val status413RequestEntityTooLarge = 413; // RFC 2616, renamed
    const val status413PayloadTooLarge = 413; // RFC 7231
    const val status414RequestUriTooLong = 414; // RFC 2616, renamed
    const val status414UriTooLong = 414; // RFC 7231
    const val status415UnsupportedMediaType = 415;
    const val status416RequestedRangeNotSatisfiable = 416; // RFC 2616, renamed
    const val status416RangeNotSatisfiable = 416; // RFC 7233
    const val status417ExpectationFailed = 417;
    const val status418ImATeapot = 418;
    const val status419AuthenticationTimeout = 419; // Not defined in any RFC
    const val status421MisdirectedRequest = 421;
    const val status422UnprocessableEntity = 422;
    const val status423Locked = 423;
    const val status424FailedDependency = 424;
    const val status426UpgradeRequired = 426;
    const val status428PreconditionRequired = 428;
    const val status429TooManyRequests = 429;
    const val status431RequestHeaderFieldsTooLarge = 431;
    const val status451UnavailableForLegalReasons = 451;
    const val status500InternalServerError = 500;
    const val status501NotImplemented = 501;
    const val status502BadGateway = 502;
    const val status503ServiceUnavailable = 503;
    const val status504GatewayTimeout = 504;
    const val status505HttpVersionNotSupported = 505;
    const val status506VariantAlsoNegotiates = 506;
    const val status507InsufficientStorage = 507;
    const val status508LoopDetected = 508;
    const val status510NotExtended = 510;
    const val status511NetworkAuthenticationRequired = 511;
}
